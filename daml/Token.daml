module Token where

import DA.Assert

-- Token'ı ihraç eden taraf
template TokenIssuer
  with
    issuer : Party
    symbol : Text
    decimals : Int
  where
    signatory issuer
    key (issuer, symbol) : (Party, Text)
    maintainer issuer

    -- Token basma (mint) yetkisi yalnızca issuer'a ait
    choice Mint : ContractId Holding
      with
        holder : Party
        amount : Decimal
      controller issuer
      do
        let thisIssuer = issuer
        create Holding with
          issuer = thisIssuer
          holder = holder
          symbol = symbol
          amount = amount


-- Basılan token'ı temsil eden sözleşme
template Holding
  with
    issuer  : Party
    holder  : Party
    symbol  : Text
    amount  : Decimal
  where
    -- issuer imzalıyor (token’ı yöneten taraf)
    signatory issuer
    -- holder sadece izleyici
    observer holder
    key (holder, symbol) : (Party, Text)
    maintainer issuer

    -- Token transferi holder kontrolünde yapılır
    choice Transfer : [ContractId Holding]
      with
        to  : Party
        qty : Decimal
      controller holder
      do
        assertMsg "insufficient balance" (qty > 0.0 && qty <= amount)
        archive self
        let thisIssuer = issuer
        newTo <- create Holding with
          issuer = thisIssuer
          holder = to
          symbol = symbol
          amount = qty
        newRemain <- create Holding with
          issuer = thisIssuer
          holder = holder
          symbol = symbol
          amount = amount - qty
        pure [newTo, newRemain]
