module Token where

import DA.Assert

-- İhraççı template’i
template TokenIssuer
  with
    issuer   : Party
    symbol   : Text
    decimals : Int
  where
    signatory issuer
    key (issuer, symbol) : (Party, Text)
    maintainer key._1  -- ✅ Splice/Amulet standartı: key üzerinden maintainer

    -- Mint: sadece issuer basar, holder’a gönderir
    choice Mint : ContractId Holding
      with
        holder : Party
        amount : Decimal
      controller issuer
      do
        assertMsg "amount must be > 0" (amount > 0.0)
        create Holding with
          tokenIssuer = issuer
          holder      = holder
          symbol      = symbol
          amount      = amount

-- Kullanıcı bakiyesini temsil eden template
template Holding
  with
    tokenIssuer : Party
    holder      : Party
    symbol      : Text
    amount      : Decimal
  where
    -- ✅ Transferi holder yönetiyor, o yüzden signatory holder
    signatory holder
    observer tokenIssuer

    choice Transfer : [ContractId Holding]
      with
        to  : Party
        qty : Decimal
      controller holder
      do
        assertMsg "qty must be > 0" (qty > 0.0)
        assertMsg "insufficient balance" (qty <= amount)
        archive self
        newTo <- create Holding with
          tokenIssuer = tokenIssuer
          holder      = to
          symbol      = symbol
          amount      = qty
        if qty == amount then
          pure [newTo]
        else do
          newRemain <- create Holding with
            tokenIssuer = tokenIssuer
            holder      = holder
            symbol      = symbol
            amount      = amount - qty
          pure [newTo, newRemain]
