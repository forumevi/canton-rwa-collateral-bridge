module Token where

import DA.Assert
import DA.Types (HasMaintainer(..), toParties)

template TokenIssuer
  with
    issuer : Party
    symbol : Text
    decimals : Int
  where
    signatory issuer
    key (issuer, symbol) : (Party, Text)
    maintainer issuer

    choice Mint : ContractId Holding
      with
        holder : Party
        amount : Decimal
      controller issuer
      do
        create Holding with
          tokenIssuer = issuer
          holder = holder
          symbol = symbol
          amount = amount


template Holding
  with
    tokenIssuer : Party
    holder      : Party
    symbol      : Text
    amount      : Decimal
  where
    signatory holder
    observer tokenIssuer

    choice Transfer : [ContractId Holding]
      with
        to  : Party
        qty : Decimal
      controller holder
      do
        assertMsg "Amount must be positive" (qty > 0.0)
        assertMsg "Insufficient balance" (qty <= amount)
        archive self
        newTo <- create Holding with
          tokenIssuer = tokenIssuer
          holder = to
          symbol = symbol
          amount = qty
        if qty == amount
          then pure [newTo]
          else do
            newRemain <- create Holding with
              tokenIssuer = tokenIssuer
              holder = holder
              symbol = symbol
              amount = amount - qty
            pure [newTo, newRemain]


-- ✅ Elle HasMaintainer instance — SDK 2.10.2 uyumlu
instance HasMaintainer TokenIssuer (Party, Text) where
  _maintainer _ (p, _) = toParties p
