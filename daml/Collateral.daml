module Collateral where

import Token
import DA.Assert

template CollateralVault
  with
    lender     : Party
    borrower   : Party
    symbol     : Text
    qty        : Decimal
  where
    signatory lender
    observer borrower

template CollateralLock
  with
    tokenIssuer : Party
    borrower    : Party
    lender      : Party
    symbol      : Text
    qty         : Decimal
    holding     : ContractId Token.Holding
  where
    signatory borrower, lender, tokenIssuer  -- ✅ lender de signatory olmalı
    observer tokenIssuer  -- (opsiyonel, zaten signatory)

    choice Lock : ContractId CollateralVault
      controller borrower
      do
        h <- fetch holding
        assertMsg "symbol mismatch" (symbol == h.symbol)
        assertMsg "qty too big" (qty <= h.amount)
        archive holding
        create CollateralVault with
          lender = lender
          borrower = borrower
          symbol = symbol
          qty = qty

    choice Release : ContractId Token.Holding
      with
        to : Party
      controller lender
      do
        archive self
        create Token.Holding with
          tokenIssuer = tokenIssuer
          holder = to
          symbol = symbol
          amount = qty
