module Loan where

import Collateral
import Token
import DA.Time
import DA.Assert

template LoanOffer
  with
    lender       : Party
    borrower     : Party
    principalSym : Text
    principalAmt : Decimal
    collateralSym: Text
    minCollateral: Decimal
    rateAPR      : Decimal
  where
    signatory lender
    observer borrower

    choice Accept : ContractId ActiveLoan
      with
        vault : ContractId Collateral.CollateralVault
      controller borrower
      do
        cv <- fetch vault
        assertMsg "insufficient collateral" (cv.qty >= minCollateral && cv.symbol == collateralSym)
        t <- getTime
        create ActiveLoan with
          lender = lender,
          borrower = borrower,
          principalSym = principalSym,
          principalAmt = principalAmt,
          collateralSym = collateralSym,
          collateralQty = cv.qty,
          startTime = t,
          rateAPR = rateAPR

template ActiveLoan
  with
    lender : Party
    borrower : Party
    principalSym : Text
    principalAmt : Decimal
    collateralSym : Text
    collateralQty : Decimal
    startTime : Time
    rateAPR : Decimal
  where
    signatory lender, borrower

    choice Disburse : ContractId Token.Holding
      controller lender
      do
        create Token.Holding with
          tokenIssuer = lender,
          holder = borrower,
          symbol = principalSym,
          amount = principalAmt

    choice Repay : ContractId Collateral.CollateralLock
      with
        repayQty : Decimal
        tokenIssuer : Party
      controller borrower
      do
        assertMsg "repay <= principal" (repayQty <= principalAmt)
        archive self
        create Collateral.CollateralLock with
          tokenIssuer = tokenIssuer,
          borrower = borrower,
          lender = lender,
          symbol = collateralSym,
          qty = collateralQty,
          holding = error "Set via JSON API in a full flow"
